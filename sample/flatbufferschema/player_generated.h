// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_GENERICBOSON_GAMETEST_H_
#define FLATBUFFERS_GENERATED_PLAYER_GENERICBOSON_GAMETEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "primitive_generated.h"

namespace GenericBoson {
namespace GameTest {

struct Player;
struct PlayerBuilder;

struct Player FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_HP = 6,
    VT_NAME = 8
  };
  const GenericBoson::GameTest::Vector3 *position() const {
    return GetStruct<const GenericBoson::GameTest::Vector3 *>(VT_POSITION);
  }
  int64_t hp() const {
    return GetField<int64_t>(VT_HP, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<GenericBoson::GameTest::Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<int64_t>(verifier, VT_HP, 8) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  typedef Player Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const GenericBoson::GameTest::Vector3 *position) {
    fbb_.AddStruct(Player::VT_POSITION, position);
  }
  void add_hp(int64_t hp) {
    fbb_.AddElement<int64_t>(Player::VT_HP, hp, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Player::VT_NAME, name);
  }
  explicit PlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Player> CreatePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const GenericBoson::GameTest::Vector3 *position = nullptr,
    int64_t hp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_hp(hp);
  builder_.add_name(name);
  builder_.add_position(position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Player> CreatePlayerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const GenericBoson::GameTest::Vector3 *position = nullptr,
    int64_t hp = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return GenericBoson::GameTest::CreatePlayer(
      _fbb,
      position,
      hp,
      name__);
}

inline const GenericBoson::GameTest::Player *GetPlayer(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::GameTest::Player>(buf);
}

inline const GenericBoson::GameTest::Player *GetSizePrefixedPlayer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::GameTest::Player>(buf);
}

inline bool VerifyPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::GameTest::Player>(nullptr);
}

inline bool VerifySizePrefixedPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::GameTest::Player>(nullptr);
}

inline void FinishPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::GameTest::Player> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::GameTest::Player> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GameTest
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_PLAYER_GENERICBOSON_GAMETEST_H_
