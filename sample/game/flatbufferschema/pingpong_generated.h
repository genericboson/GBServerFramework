// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PINGPONG_GENERICBOSON_GAMETEST_H_
#define FLATBUFFERS_GENERATED_PINGPONG_GENERICBOSON_GAMETEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace GenericBoson {
namespace GameTest {

struct PingPong;
struct PingPongBuilder;

struct PingPong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PingPongBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM = 4
  };
  int64_t num() const {
    return GetField<int64_t>(VT_NUM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_NUM, 8) &&
           verifier.EndTable();
  }
};

struct PingPongBuilder {
  typedef PingPong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_num(int64_t num) {
    fbb_.AddElement<int64_t>(PingPong::VT_NUM, num, 0);
  }
  explicit PingPongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PingPong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PingPong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PingPong> CreatePingPong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t num = 0) {
  PingPongBuilder builder_(_fbb);
  builder_.add_num(num);
  return builder_.Finish();
}

inline const GenericBoson::GameTest::PingPong *GetPingPong(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::GameTest::PingPong>(buf);
}

inline const GenericBoson::GameTest::PingPong *GetSizePrefixedPingPong(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::GameTest::PingPong>(buf);
}

inline bool VerifyPingPongBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::GameTest::PingPong>(nullptr);
}

inline bool VerifySizePrefixedPingPongBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::GameTest::PingPong>(nullptr);
}

inline void FinishPingPongBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::GameTest::PingPong> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPingPongBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::GameTest::PingPong> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GameTest
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_PINGPONG_GENERICBOSON_GAMETEST_H_
